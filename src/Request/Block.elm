{-
   Bitcoind
   The REST API can be enabled with the `-rest` option. The interface runs on the same port as the JSON-RPC interface, by default port `8332` for **mainnet**, port `18332` for **testnet**, and port `18443` for **regtest**.

   OpenAPI spec version: 0.16
   Contact: johan@lepetitbloc.net

   NOTE: This file is auto generated by the swagger code generator program.
   https://github.com/swagger-api/swagger-codegen.git
   Do not edit this file manually.
-}


module Request.Block exposing (restBlockExtended, restBlockNotxdetails)

import Data.Block exposing (Block, blockDecoder)
import Http
import Json.Decode as Decode


basePath : String
basePath =
    "http://localhost:3000/rest"


{-
   Given a block hash: returns a block, in binary, hex-encoded binary or JSON formats. The HTTP request and response are both handled entirely in-memory, thus making maximum memory usage at least 2.66MB (1 MB max block, plus hex encoding) per request. With the /notxdetails/ option JSON response will only contain the transaction hash instead of the complete transaction details. The option only affects the JSON response.
-}
restBlockExtended : String -> Http.Request Block
restBlockExtended blockHash =
    { method = "GET"
    , url = basePath ++ "/block/" ++ blockHash
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson blockDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Given a block hash: returns a block, in binary, hex-encoded binary or JSON formats. The HTTP request and response are both handled entirely in-memory, thus making maximum memory usage at least 2.66MB (1 MB max block, plus hex encoding) per request. With the /notxdetails/ option JSON response will only contain the transaction hash instead of the complete transaction details. The option only affects the JSON response.
-}
restBlockNotxdetails : String -> String -> Http.Request Block
restBlockNotxdetails blockHash format =
    { method = "GET"
    , url = basePath ++ "/block/notxdetails/" ++ blockHash ++ "." ++ format
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson blockDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


