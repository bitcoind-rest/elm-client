{-
   Bitcoind
   The REST API can be enabled with the `-rest` option. The interface runs on the same port as the JSON-RPC interface, by default port `8332` for **mainnet**, port `18332` for **testnet**, and port `18443` for **regtest**.

   OpenAPI spec version: 0.16
   Contact: johan@lepetitbloc.net

   NOTE: This file is auto generated by the swagger code generator program.
   https://github.com/swagger-api/swagger-codegen.git
   Do not edit this file manually.
-}


module Data.ChainInfo exposing (ChainInfo, Chain(..), chainInfoDecoder, chainInfoEncoder)

import Data.BIP exposing (BIP, bIPDecoder, bIPEncoder)
import Data.ChainInfoBip9Softforks exposing (ChainInfoBip9Softforks, chainInfoBip9SoftforksDecoder, chainInfoBip9SoftforksEncoder)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (decode, optional, required)
import Json.Encode as Encode
import Maybe exposing (map, withDefault)




type alias ChainInfo =
    { chain : Maybe Chain
    , blocks : Maybe Int
    , headers : Maybe Int
    , bestblockhash : Maybe String
    , difficulty : Maybe Int
    , mediantime : Maybe Int
    , verificationprogress : Maybe Int
    , initialblockdownload : Maybe Bool
    , chainwork : Maybe String
    , sizeOnDisk : Maybe Int
    , pruned : Maybe Bool
    , softforks : Maybe (List BIP)
    , bip9Softforks : Maybe ChainInfoBip9Softforks
    , warnings : Maybe String
    }


type Chain
    = Main
    | Test
    | Regtest



chainInfoDecoder : Decoder ChainInfo
chainInfoDecoder =
    decode ChainInfo
        |> optional "chain" (Decode.nullable chainDecoder) Nothing
        |> optional "blocks" (Decode.nullable Decode.int) Nothing
        |> optional "headers" (Decode.nullable Decode.int) Nothing
        |> optional "bestblockhash" (Decode.nullable Decode.string) Nothing
        |> optional "difficulty" (Decode.nullable Decode.int) Nothing
        |> optional "mediantime" (Decode.nullable Decode.int) Nothing
        |> optional "verificationprogress" (Decode.nullable Decode.int) Nothing
        |> optional "initialblockdownload" (Decode.nullable Decode.bool) Nothing
        |> optional "chainwork" (Decode.nullable Decode.string) Nothing
        |> optional "size_on_disk" (Decode.nullable Decode.int) Nothing
        |> optional "pruned" (Decode.nullable Decode.bool) Nothing
        |> optional "softforks" (Decode.nullable (Decode.list bIPDecoder)) Nothing
        |> optional "bip9_softforks" (Decode.nullable chainInfoBip9SoftforksDecoder) Nothing
        |> optional "warnings" (Decode.nullable Decode.string) Nothing



chainInfoEncoder : ChainInfo -> Encode.Value
chainInfoEncoder model =
    Encode.object
        [ ( "chain", withDefault Encode.null (map chainEncoder model.chain) )
        , ( "blocks", withDefault Encode.null (map Encode.int model.blocks) )
        , ( "headers", withDefault Encode.null (map Encode.int model.headers) )
        , ( "bestblockhash", withDefault Encode.null (map Encode.string model.bestblockhash) )
        , ( "difficulty", withDefault Encode.null (map Encode.int model.difficulty) )
        , ( "mediantime", withDefault Encode.null (map Encode.int model.mediantime) )
        , ( "verificationprogress", withDefault Encode.null (map Encode.int model.verificationprogress) )
        , ( "initialblockdownload", withDefault Encode.null (map Encode.bool model.initialblockdownload) )
        , ( "chainwork", withDefault Encode.null (map Encode.string model.chainwork) )
        , ( "size_on_disk", withDefault Encode.null (map Encode.int model.sizeOnDisk) )
        , ( "pruned", withDefault Encode.null (map Encode.bool model.pruned) )
        , ( "softforks", withDefault Encode.null (map (Encode.list << List.map bIPEncoder) model.softforks) )
        , ( "bip9_softforks", withDefault Encode.null (map chainInfoBip9SoftforksEncoder model.bip9Softforks) )
        , ( "warnings", withDefault Encode.null (map Encode.string model.warnings) )
        ]



chainDecoder : Decoder Chain
chainDecoder =
    Decode.string
        |> Decode.andThen (\str ->
            case str of
                "main" ->
                    Decode.succeed Main

                "test" ->
                    Decode.succeed Test

                "regtest" ->
                    Decode.succeed Regtest

                other ->
                    Decode.fail <| "Unknown type: " ++ other
        )


chainEncoder : Chain -> Encode.Value
chainEncoder model =
    case model of
        Main ->
            Encode.string "main"

        Test ->
            Encode.string "test"

        Regtest ->
            Encode.string "regtest"



