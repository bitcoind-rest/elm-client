{-
   Bitcoind
   The REST API can be enabled with the `-rest` option. The interface runs on the same port as the JSON-RPC interface, by default port `8332` for **mainnet**, port `18332` for **testnet**, and port `18443` for **regtest**.

   OpenAPI spec version: 0.16
   Contact: johan@lepetitbloc.net

   NOTE: This file is auto generated by the swagger code generator program.
   https://github.com/swagger-api/swagger-codegen.git
   Do not edit this file manually.
-}


module Data.Block exposing (Block, blockDecoder, blockEncoder)

import Data.Transaction exposing (Transaction, transactionDecoder, transactionEncoder)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (decode, optional, required)
import Json.Encode as Encode
import Maybe exposing (map, withDefault)




type alias Block =
    { hash : Maybe String
    , confirmations : Maybe Int
    , strippedsize : Maybe Int
    , size : Maybe Int
    , weight : Maybe Int
    , height : Maybe Int
    , version : Maybe Int
    , versionHex : Maybe String
    , merkleroot : Maybe String
    , tx : Maybe (List Transaction)
    , time : Maybe Int
    , mediantime : Maybe Int
    , nonce : Maybe Int
    , bits : Maybe String
    , difficulty : Maybe Float
    , chainwork : Maybe String
    }


blockDecoder : Decoder Block
blockDecoder =
    decode Block
        |> optional "hash" (Decode.nullable Decode.string) Nothing
        |> optional "confirmations" (Decode.nullable Decode.int) Nothing
        |> optional "strippedsize" (Decode.nullable Decode.int) Nothing
        |> optional "size" (Decode.nullable Decode.int) Nothing
        |> optional "weight" (Decode.nullable Decode.int) Nothing
        |> optional "height" (Decode.nullable Decode.int) Nothing
        |> optional "version" (Decode.nullable Decode.int) Nothing
        |> optional "versionHex" (Decode.nullable Decode.string) Nothing
        |> optional "merkleroot" (Decode.nullable Decode.string) Nothing
        |> optional "tx" (Decode.nullable (Decode.list transactionDecoder)) Nothing
        |> optional "time" (Decode.nullable Decode.int) Nothing
        |> optional "mediantime" (Decode.nullable Decode.int) Nothing
        |> optional "nonce" (Decode.nullable Decode.int) Nothing
        |> optional "bits" (Decode.nullable Decode.string) Nothing
        |> optional "difficulty" (Decode.nullable Decode.float) Nothing
        |> optional "chainwork" (Decode.nullable Decode.string) Nothing



blockEncoder : Block -> Encode.Value
blockEncoder model =
    Encode.object
        [ ( "hash", withDefault Encode.null (map Encode.string model.hash) )
        , ( "confirmations", withDefault Encode.null (map Encode.int model.confirmations) )
        , ( "strippedsize", withDefault Encode.null (map Encode.int model.strippedsize) )
        , ( "size", withDefault Encode.null (map Encode.int model.size) )
        , ( "weight", withDefault Encode.null (map Encode.int model.weight) )
        , ( "height", withDefault Encode.null (map Encode.int model.height) )
        , ( "version", withDefault Encode.null (map Encode.int model.version) )
        , ( "versionHex", withDefault Encode.null (map Encode.string model.versionHex) )
        , ( "merkleroot", withDefault Encode.null (map Encode.string model.merkleroot) )
        , ( "tx", withDefault Encode.null (map (Encode.list << List.map transactionEncoder) model.tx) )
        , ( "time", withDefault Encode.null (map Encode.int model.time) )
        , ( "mediantime", withDefault Encode.null (map Encode.int model.mediantime) )
        , ( "nonce", withDefault Encode.null (map Encode.int model.nonce) )
        , ( "bits", withDefault Encode.null (map Encode.string model.bits) )
        , ( "difficulty", withDefault Encode.null (map Encode.float model.difficulty) )
        , ( "chainwork", withDefault Encode.null (map Encode.string model.chainwork) )
        ]


