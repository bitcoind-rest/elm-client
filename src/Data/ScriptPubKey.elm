{-
   Bitcoind
   The REST API can be enabled with the `-rest` option. The interface runs on the same port as the JSON-RPC interface, by default port `8332` for **mainnet**, port `18332` for **testnet**, and port `18443` for **regtest**.

   OpenAPI spec version: 0.16
   Contact: johan@lepetitbloc.net

   NOTE: This file is auto generated by the swagger code generator program.
   https://github.com/swagger-api/swagger-codegen.git
   Do not edit this file manually.
-}


module Data.ScriptPubKey exposing (ScriptPubKey, Type_(..), scriptPubKeyDecoder, scriptPubKeyEncoder)

import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (decode, optional, required)
import Json.Encode as Encode
import Maybe exposing (map, withDefault)




type alias ScriptPubKey =
    { asm : Maybe String
    , hex : Maybe String
    , reqSigs : Maybe Int
    , type_ : Maybe Type_
    , addresses : Maybe (List String)
    }


type Type_
    = Nonstandard
    | Pubkey
    | Pubkeyhash
    | Scripthash
    | Multisig
    | Nulldata
    | WitnessV0Keyhash
    | WitnessV0Scripthash
    | WitnessUnknown



scriptPubKeyDecoder : Decoder ScriptPubKey
scriptPubKeyDecoder =
    decode ScriptPubKey
        |> optional "asm" (Decode.nullable Decode.string) Nothing
        |> optional "hex" (Decode.nullable Decode.string) Nothing
        |> optional "reqSigs" (Decode.nullable Decode.int) Nothing
        |> optional "type" (Decode.nullable typeDecoder) (Just "pubkeyhash")
        |> optional "addresses" (Decode.nullable (Decode.list Decode.string)) Nothing



scriptPubKeyEncoder : ScriptPubKey -> Encode.Value
scriptPubKeyEncoder model =
    Encode.object
        [ ( "asm", withDefault Encode.null (map Encode.string model.asm) )
        , ( "hex", withDefault Encode.null (map Encode.string model.hex) )
        , ( "reqSigs", withDefault Encode.null (map Encode.int model.reqSigs) )
        , ( "type", withDefault Encode.null (map typeEncoder model.type_) )
        , ( "addresses", withDefault Encode.null (map (Encode.list << List.map Encode.string) model.addresses) )
        ]



typeDecoder : Decoder Type_
typeDecoder =
    Decode.string
        |> Decode.andThen (\str ->
            case str of
                "nonstandard" ->
                    Decode.succeed Nonstandard

                "pubkey" ->
                    Decode.succeed Pubkey

                "pubkeyhash" ->
                    Decode.succeed Pubkeyhash

                "scripthash" ->
                    Decode.succeed Scripthash

                "multisig" ->
                    Decode.succeed Multisig

                "nulldata" ->
                    Decode.succeed Nulldata

                "witness_v0_keyhash" ->
                    Decode.succeed WitnessV0Keyhash

                "witness_v0_scripthash" ->
                    Decode.succeed WitnessV0Scripthash

                "witness_unknown" ->
                    Decode.succeed WitnessUnknown

                other ->
                    Decode.fail <| "Unknown type: " ++ other
        )


typeEncoder : Type_ -> Encode.Value
typeEncoder model =
    case model of
        Nonstandard ->
            Encode.string "nonstandard"

        Pubkey ->
            Encode.string "pubkey"

        Pubkeyhash ->
            Encode.string "pubkeyhash"

        Scripthash ->
            Encode.string "scripthash"

        Multisig ->
            Encode.string "multisig"

        Nulldata ->
            Encode.string "nulldata"

        WitnessV0Keyhash ->
            Encode.string "witness_v0_keyhash"

        WitnessV0Scripthash ->
            Encode.string "witness_v0_scripthash"

        WitnessUnknown ->
            Encode.string "witness_unknown"



