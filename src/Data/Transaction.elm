{-
   Bitcoind
   The REST API can be enabled with the `-rest` option. The interface runs on the same port as the JSON-RPC interface, by default port `8332` for **mainnet**, port `18332` for **testnet**, and port `18443` for **regtest**.

   OpenAPI spec version: 0.16
   Contact: johan@lepetitbloc.net

   NOTE: This file is auto generated by the swagger code generator program.
   https://github.com/swagger-api/swagger-codegen.git
   Do not edit this file manually.
-}


module Data.Transaction exposing (Transaction, Bip125Replaceable(..), transactionDecoder, transactionEncoder)

import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (decode, optional, required)
import Json.Encode as Encode
import Maybe exposing (map, withDefault)




type alias Transaction =
    { amount : Maybe Float
    , fee : Maybe Float
    , confirmations : Maybe Int
    , blockhash : Maybe String
    , blockindex : Maybe Int
    , blocktime : Maybe Int
    , txid : Maybe String
    , txhash : Maybe String
    , version : Maybe Int
    , size : Maybe Int
    , vsize : Maybe Int
    , locktime : Maybe Int
    , time : Maybe Int
    , timereceived : Maybe Int
    , bip125Replaceable : Maybe Bip125Replaceable
    }


type Bip125Replaceable
    = Yes
    | No
    | Unknown



transactionDecoder : Decoder Transaction
transactionDecoder =
    decode Transaction
        |> optional "amount" (Decode.nullable Decode.float) Nothing
        |> optional "fee" (Decode.nullable Decode.float) Nothing
        |> optional "confirmations" (Decode.nullable Decode.int) Nothing
        |> optional "blockhash" (Decode.nullable Decode.string) Nothing
        |> optional "blockindex" (Decode.nullable Decode.int) Nothing
        |> optional "blocktime" (Decode.nullable Decode.int) Nothing
        |> optional "txid" (Decode.nullable Decode.string) Nothing
        |> optional "txhash" (Decode.nullable Decode.string) Nothing
        |> optional "version" (Decode.nullable Decode.int) Nothing
        |> optional "size" (Decode.nullable Decode.int) Nothing
        |> optional "vsize" (Decode.nullable Decode.int) Nothing
        |> optional "locktime" (Decode.nullable Decode.int) Nothing
        |> optional "time" (Decode.nullable Decode.int) Nothing
        |> optional "timereceived" (Decode.nullable Decode.int) Nothing
        |> optional "bip125-replaceable" (Decode.nullable bip125ReplaceableDecoder) Nothing



transactionEncoder : Transaction -> Encode.Value
transactionEncoder model =
    Encode.object
        [ ( "amount", withDefault Encode.null (map Encode.float model.amount) )
        , ( "fee", withDefault Encode.null (map Encode.float model.fee) )
        , ( "confirmations", withDefault Encode.null (map Encode.int model.confirmations) )
        , ( "blockhash", withDefault Encode.null (map Encode.string model.blockhash) )
        , ( "blockindex", withDefault Encode.null (map Encode.int model.blockindex) )
        , ( "blocktime", withDefault Encode.null (map Encode.int model.blocktime) )
        , ( "txid", withDefault Encode.null (map Encode.string model.txid) )
        , ( "txhash", withDefault Encode.null (map Encode.string model.txhash) )
        , ( "version", withDefault Encode.null (map Encode.int model.version) )
        , ( "size", withDefault Encode.null (map Encode.int model.size) )
        , ( "vsize", withDefault Encode.null (map Encode.int model.vsize) )
        , ( "locktime", withDefault Encode.null (map Encode.int model.locktime) )
        , ( "time", withDefault Encode.null (map Encode.int model.time) )
        , ( "timereceived", withDefault Encode.null (map Encode.int model.timereceived) )
        , ( "bip125-replaceable", withDefault Encode.null (map bip125ReplaceableEncoder model.bip125Replaceable) )
        ]



bip125ReplaceableDecoder : Decoder Bip125Replaceable
bip125ReplaceableDecoder =
    Decode.string
        |> Decode.andThen (\str ->
            case str of
                "yes" ->
                    Decode.succeed Yes

                "no" ->
                    Decode.succeed No

                "unknown" ->
                    Decode.succeed Unknown

                other ->
                    Decode.fail <| "Unknown type: " ++ other
        )


bip125ReplaceableEncoder : Bip125Replaceable -> Encode.Value
bip125ReplaceableEncoder model =
    case model of
        Yes ->
            Encode.string "yes"

        No ->
            Encode.string "no"

        Unknown ->
            Encode.string "unknown"



