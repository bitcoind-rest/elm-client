{-
   Bitcoind
   The REST API can be enabled with the `-rest` option. The interface runs on the same port as the JSON-RPC interface, by default port `8332` for **mainnet**, port `18332` for **testnet**, and port `18443` for **regtest**.

   OpenAPI spec version: 0.16
   Contact: johan@lepetitbloc.net

   NOTE: This file is auto generated by the swagger code generator program.
   https://github.com/swagger-api/swagger-codegen.git
   Do not edit this file manually.
-}


module Data.BIP9 exposing (BIP9, Status(..), bIP9Decoder, bIP9Encoder)

import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (decode, optional, required)
import Json.Encode as Encode
import Maybe exposing (map, withDefault)




type alias BIP9 =
    { status : Maybe Status
    , startTime : Maybe Int
    , timeout : Maybe Int
    , since : Maybe Int
    }


type Status
    = Defined
    | Started
    | LockedIn
    | Active
    | Failed



bIP9Decoder : Decoder BIP9
bIP9Decoder =
    decode BIP9
        |> optional "status" (Decode.nullable statusDecoder) Nothing
        |> optional "startTime" (Decode.nullable Decode.int) Nothing
        |> optional "timeout" (Decode.nullable Decode.int) Nothing
        |> optional "since" (Decode.nullable Decode.int) Nothing



bIP9Encoder : BIP9 -> Encode.Value
bIP9Encoder model =
    Encode.object
        [ ( "status", withDefault Encode.null (map statusEncoder model.status) )
        , ( "startTime", withDefault Encode.null (map Encode.int model.startTime) )
        , ( "timeout", withDefault Encode.null (map Encode.int model.timeout) )
        , ( "since", withDefault Encode.null (map Encode.int model.since) )
        ]



statusDecoder : Decoder Status
statusDecoder =
    Decode.string
        |> Decode.andThen (\str ->
            case str of
                "defined" ->
                    Decode.succeed Defined

                "started" ->
                    Decode.succeed Started

                "locked_in" ->
                    Decode.succeed LockedIn

                "active" ->
                    Decode.succeed Active

                "failed" ->
                    Decode.succeed Failed

                other ->
                    Decode.fail <| "Unknown type: " ++ other
        )


statusEncoder : Status -> Encode.Value
statusEncoder model =
    case model of
        Defined ->
            Encode.string "defined"

        Started ->
            Encode.string "started"

        LockedIn ->
            Encode.string "locked_in"

        Active ->
            Encode.string "active"

        Failed ->
            Encode.string "failed"



